// Code generated by MockGen. DO NOT EDIT.
// Source: gcs_function.go

// Package gcsmock is a generated GoMock package.
package gcsmock

import (
	bytes "bytes"
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockGCSFunction is a mock of GCSFunction interface.
type MockGCSFunction struct {
	ctrl     *gomock.Controller
	recorder *MockGCSFunctionMockRecorder
}

// MockGCSFunctionMockRecorder is the mock recorder for MockGCSFunction.
type MockGCSFunctionMockRecorder struct {
	mock *MockGCSFunction
}

// NewMockGCSFunction creates a new mock instance.
func NewMockGCSFunction(ctrl *gomock.Controller) *MockGCSFunction {
	mock := &MockGCSFunction{ctrl: ctrl}
	mock.recorder = &MockGCSFunctionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGCSFunction) EXPECT() *MockGCSFunctionMockRecorder {
	return m.recorder
}

// DownloadFile mocks base method.
func (m *MockGCSFunction) DownloadFile(ctx context.Context, gcsFileName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DownloadFile", ctx, gcsFileName)
	ret0, _ := ret[0].(error)
	return ret0
}

// DownloadFile indicates an expected call of DownloadFile.
func (mr *MockGCSFunctionMockRecorder) DownloadFile(ctx, gcsFileName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownloadFile", reflect.TypeOf((*MockGCSFunction)(nil).DownloadFile), ctx, gcsFileName)
}

// UploadFile mocks base method.
func (m *MockGCSFunction) UploadFile(ctx context.Context, fileName string) (*string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadFile", ctx, fileName)
	ret0, _ := ret[0].(*string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UploadFile indicates an expected call of UploadFile.
func (mr *MockGCSFunctionMockRecorder) UploadFile(ctx, fileName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadFile", reflect.TypeOf((*MockGCSFunction)(nil).UploadFile), ctx, fileName)
}

// UploadNonConvertedFile mocks base method.
func (m *MockGCSFunction) UploadNonConvertedFile(ctx context.Context, reader *bytes.Reader, fileName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadNonConvertedFile", ctx, reader, fileName)
	ret0, _ := ret[0].(error)
	return ret0
}

// UploadNonConvertedFile indicates an expected call of UploadNonConvertedFile.
func (mr *MockGCSFunctionMockRecorder) UploadNonConvertedFile(ctx, reader, fileName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadNonConvertedFile", reflect.TypeOf((*MockGCSFunction)(nil).UploadNonConvertedFile), ctx, reader, fileName)
}
