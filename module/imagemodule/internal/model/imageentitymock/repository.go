// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go

// Package imageentitymock is a generated GoMock package.
package imageentitymock

import (
	context "context"
	reflect "reflect"

	imageentity "github.com/Kimoto-Norihiro/image-converter/module/imagemodule/internal/model"
	imagemodel "github.com/Kimoto-Norihiro/image-converter/module/imagemodule/model/imagemodel"
	gomock "github.com/golang/mock/gomock"
	gorm "gorm.io/gorm"
)

// MockImageRepository is a mock of ImageRepository interface.
type MockImageRepository struct {
	ctrl     *gomock.Controller
	recorder *MockImageRepositoryMockRecorder
}

// MockImageRepositoryMockRecorder is the mock recorder for MockImageRepository.
type MockImageRepositoryMockRecorder struct {
	mock *MockImageRepository
}

// NewMockImageRepository creates a new mock instance.
func NewMockImageRepository(ctrl *gomock.Controller) *MockImageRepository {
	mock := &MockImageRepository{ctrl: ctrl}
	mock.recorder = &MockImageRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockImageRepository) EXPECT() *MockImageRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockImageRepository) Create(ctx context.Context, tx *gorm.DB, entity *imageentity.ImageEntity) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, tx, entity)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockImageRepositoryMockRecorder) Create(ctx, tx, entity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockImageRepository)(nil).Create), ctx, tx, entity)
}

// FindForUpdate mocks base method.
func (m *MockImageRepository) FindForUpdate(ctx context.Context, tx *gorm.DB, id int64) (*imageentity.ImageEntity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindForUpdate", ctx, tx, id)
	ret0, _ := ret[0].(*imageentity.ImageEntity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindForUpdate indicates an expected call of FindForUpdate.
func (mr *MockImageRepositoryMockRecorder) FindForUpdate(ctx, tx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindForUpdate", reflect.TypeOf((*MockImageRepository)(nil).FindForUpdate), ctx, tx, id)
}

// ListImages mocks base method.
func (m *MockImageRepository) ListImages(ctx context.Context, db *gorm.DB) ([]imagemodel.Image, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListImages", ctx, db)
	ret0, _ := ret[0].([]imagemodel.Image)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListImages indicates an expected call of ListImages.
func (mr *MockImageRepositoryMockRecorder) ListImages(ctx, db interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListImages", reflect.TypeOf((*MockImageRepository)(nil).ListImages), ctx, db)
}

// Update mocks base method.
func (m *MockImageRepository) Update(ctx context.Context, tx *gorm.DB, entity *imageentity.ImageEntity) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, tx, entity)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockImageRepositoryMockRecorder) Update(ctx, tx, entity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockImageRepository)(nil).Update), ctx, tx, entity)
}
